location ~ ^/content/(.*)$ {

    set_by_lua_block $jwt_req_zone {
        local cjson = require "cjson"
        local jwt = require "resty.jwt"
        local open = io.open

        local file = open('/secrets/public_key.pem', "rb") -- r read mode and b binary mode
        if not file then return nil end
        local secret = file:read "*a" -- *a or *all reads the whole file
        file:close()

        local jwt_token = ngx.var.cookie_JWT

        local jwt_obj = jwt:verify(secret, jwt_token)

        if (jwt_obj.valid and jwt_obj.verified) then
            return jwt_obj.payload.nonce
        else
            return ""
        end
    }

    set_by_lua_block $missingToken {
        local h = ngx.var.jwt_req_zone
        if (h == nil or h == "") then
            return "true"
        else
            return ""
        end
    }

    proxy_pass_request_headers  on;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;
    proxy_set_header X-Forwarded-Host  $host;

    error_page 410 = @uniqueLimitContentServer;

    if ($missingToken) {
        return 410;
        break;
    }

    limit_req zone=zone_with_token;
    proxy_pass http://content-server/$1$is_args$args;
}


location @uniqueLimitContentServer {
    set_by_lua_block $no_key { return "noKey" }
    limit_req zone=no_token;

    proxy_pass http://content-server/$1$is_args$args;
}


location  ~ ^/comms/(.*)$ {
    proxy_pass http://comms-server/$1$is_args$args;
    proxy_pass_request_headers  on;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
}

location  ~ ^/lambdas/(.*)$ {
    proxy_pass http://lambdas/$1$is_args$args;
    proxy_pass_request_headers  on;
    proxy_set_header X-Forwarded-Host  $host;
}

location / {
    root /etc/nginx/html;
    error_page 404 /404;
    error_page 500 502 503 504 /50x;
}


location ~ ^/auth/challenge {
    set_by_lua_block $no_key { return "noKey" }
    limit_req zone=no_token burst=20;
    limit_req_dry_run off;

    proxy_pass http://auth-server/challenge/$is_args$args;
    proxy_pass_request_headers  on;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    proxy_read_timeout          600;
    send_timeout                600;
    proxy_set_header X-Forwarded-Host  $host;
}