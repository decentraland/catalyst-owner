version: "3"

volumes:
  content_server_storage: {}
  nginx_storage: {}
  lambdas_server_storage: {}
  shared_keys:


services:
  postgres:
    image: postgres:12
    container_name: ${POSTGRES_HOST:-postgres}
    env_file:
      - .env-database-admin
      - .env-database-content
    expose:
      - ${POSTGRES_PORT:-5432}
    restart: always
    shm_size: 2560MB
    volumes:
      - "${CONTENT_SERVER_STORAGE}/database:/var/lib/postgresql/data"
      - "./local/postgres/custom-entrypoint.sh:/usr/local/bin/custom-entrypoint.sh:ro"
      - "./local/postgres/postgresql.conf:/etc/postgresql/postgresql.conf"
      - "./local/postgres/scripts/always:/always-initdb.d:ro"
      - "./local/postgres/scripts/initial:/docker-entrypoint-initdb.d:ro"
    command: custom-entrypoint.sh -c config_file=/etc/postgresql/postgresql.conf
    logging:
      driver: syslog
      options: { tag: postgres }

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      - PG_EXPORTER_EXTEND_QUERY_PATH=/etc/postgres-exporter/queries.yaml
    env_file:
      - .env-database-metrics
    volumes:
      - ./local/postgres-exporter:/etc/postgres-exporter
    restart: always
    depends_on:
      - postgres
    shm_size: 512mb
    logging:
      driver: syslog
      options: { tag: postgres-exporter }

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - "/:/rootfs:ro"
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)"
    logging:
      driver: syslog
      options: { tag: node-exporter }

  content-server:
    image: quay.io/decentraland/catalyst:${DOCKER_TAG:-latest}
    command: [ "/usr/local/bin/node", "--max-old-space-size=8192", "content/entrypoints/run-server.js" ]
    working_dir: /app
    environment:
      - LOG_REQUESTS=false # Request logs are produced by NGINX
      - CONTENT_SERVER_ADDRESS=${CATALYST_URL}/content/
      - STORAGE_ROOT_FOLDER=/app/storage/content_server/
      - BOOTSTRAP_FROM_SCRATCH=${BOOTSTRAP_FROM_SCRATCH:-false}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    env_file:
      - .env
      - .env-advanced
      - .env-database-content
    depends_on:
      - postgres
    expose:
      - "6969"
    restart: always
    volumes:
      - "${CONTENT_SERVER_STORAGE}:/app/storage/content_server/"
    logging:
      driver: syslog
      options: { tag: content-server }

  lambdas:
    image: quay.io/decentraland/catalyst:${DOCKER_TAG:-latest}
    command: [ "/usr/local/bin/node", "--max-old-space-size=8192", "lambdas/entrypoints/run-server.js" ]
    working_dir: /app
    restart: always
    environment:
      - LOG_REQUESTS=false # Request logs are produced by NGINX
      - CONTENT_SERVER_ADDRESS=${CATALYST_URL}/content/
      - LAMBDAS_STORAGE_LOCATION=/app/storage/lambdas
      - "COMMS_PROTOCOL=v3"
    env_file:
      - .env
      - .env-advanced
    expose:
      - "7070"
    logging:
      driver: syslog
      options: { tag: lambdas }
    volumes:
      - "lambdas_server_storage:/app/storage/lambdas"

  lamb2:
    image: quay.io/decentraland/lamb2:${LAMB2_DOCKER_TAG:-latest}
    working_dir: /app
    restart: always
    environment:
      - HTTP_SERVER_PORT=7272
      - LAMBDAS_URL=${CATALYST_URL}/lambdas/
      - CONTENT_URL=${CATALYST_URL}/content/
      - INTERNAL_LAMBDAS_URL=http://lambdas:7070
      - INTERNAL_CONTENT_URL=http://content-server:6969
      - REALM_NAME=${REALM_NAME}
      - MAX_USERS=${MAX_USERS:-400}
      - DISABLE_THIRD_PARTY_PROVIDERS_RESOLVER_SERVICE_USAGE=${DISABLE_THIRD_PARTY_PROVIDERS_RESOLVER_SERVICE_USAGE:-false}
    env_file:
      - .env
      - .env-advanced
    expose:
      - "7272"
    logging:
      driver: syslog
      options: { tag: lamb2 }

  cadvisor:
    image: gcr.io/google_containers/cadvisor:v0.35.0
    container_name: cadvisor
    command: --docker_only=true --disable_root_cgroup_stats=true
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    depends_on:
      - content-server
      - lambdas

  nginx:
    container_name: nginx
    image: nginx:1.22-alpine
    ports:
      - "80:80"
      - "443:443"
    command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
    volumes:
      - ./local/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./local/nginx/conf.d:/etc/nginx/conf.d
      - ./local/nginx/include:/etc/nginx/include
      - ./local/nginx/auth:/etc/nginx/auth
      - ./local/nginx/html:/etc/nginx/html
      - ./local/certbot/conf:/etc/letsencrypt
      - ./local/certbot/www:/var/www/certbot
      - shared_keys:/secrets
    restart: always
    depends_on:
      - lambdas
      - lamb2
      - cadvisor
      - content-server
      - postgres-exporter
      - node-exporter
      - certbot
    logging:
      driver: syslog
      options: { tag: nginx }

  certbot:
    image: certbot/certbot
    restart: always
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    volumes:
      - ./local/certbot/conf:/etc/letsencrypt
      - ./local/certbot/www:/var/www/certbot
    logging:
      driver: syslog
      options: { tag: certbot }
